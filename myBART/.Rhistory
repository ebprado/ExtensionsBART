rowSums(tree_predictions)
}
# Uses the flatted trees to get predictions and returns them as a 2-d list,
# n_chains x n_samples.
#' @export
dbarts_marginal_prediction <- function(object, x, filter_variable){
trees <- object$fit$getTrees()
samples_list <- by(trees[c("tree", "var", "value")],
trees[c("chain", "sample")],
filter_trees_out)
# Convert list
samples <- array(unlist(samples_list),
c(nrow(x), dim(samples_list)[1L], dim(samples_list)[2L]))
# permute to match stored values in bart object
samples <- aperm(samples, c(2L, 3L, 1L))
# undo dbarts' internal scaling
samples <- diff(range(object$y)) * (samples + 0.5) + min(object$y)
# Take the mean of the predicted values over the chains
samples = apply(apply(samples, c(1,3), mean),2 ,mean)
return(samples)
}
f <- function(x) {
10 * sin(pi * x[,1] * x[,2]) + 20 * (x[,3] - 0.5)^2 +
10 * x[,4] + 5 * x[,5]
}
set.seed(99)
sigma <- 1.0
n     <- 100
x  <- matrix(runif(n * 10), n, 10)
Ey <- f(x)
y  <- rnorm(n, Ey, sigma)
set.seed(99)
bartFit <- bart2(x, y, verbose = FALSE, keepTrees = TRUE)
marg_pred = dbarts_marginal_prediction(bartFit, x, 4)
f <- function(x) {
10 * sin(pi * x[,1] * x[,2]) + 20 * (x[,3] - 0.5)^2 +
10 * x[,4] + 5 * x[,5]
}
set.seed(99)
sigma <- 1.0
n     <- 100
x  <- matrix(runif(n * 10), n, 10)
Ey <- f(x)
y  <- rnorm(n, Ey, sigma)
set.seed(99)
bartFit <- bart2(x, y, verbose = FALSE, keepTrees = TRUE)
object = bartFit
trees <- object$fit$getTrees()
samples_list <- by(trees[c("tree", "var", "value")],
trees[c("chain", "sample")],
filter_trees_out)
nrow(x)
samples_list <- by(trees[c("tree", "var", "value")],
trees[c("chain", "sample")],
filter_trees_out( x = x))
samples_list <- by(trees[c("tree", "var", "value")],
trees[c("chain", "sample")],
filter_trees_out(, x = x))
# Thanks to Dr. Vincent Dorie for kindly helping out with this!
dbarts_rebuild_tree <- function(tree.flat) {
if (tree.flat$var[1L] == -1) return(tree.flat$value[1L])
left <- dbarts_rebuild_tree(tree.flat[-1L,])
if (!is.list(left)) {
n.left <- 1L
} else {
n.left <- left$n
left$n <- NULL
}
right <- dbarts_rebuild_tree(tree.flat[seq.int(2L + n.left, nrow(tree.flat)),])
if (!is.list(right)) {
n.right <- 1L
} else {
n.right <- right$n
right$n <- NULL
}
list(var = tree.flat$var[1L], value = tree.flat$value[1L],
left = left, right = right, n = 1L + n.left + n.right)
}
# Uses a list of lists tree to partition x and returns the
# vector of predictions.
dbarts_get_predictions <- function(tree, x) {
if (!is.list(tree)) return(rep_len(tree, nrow(x)))
goes_left <- x[, tree$var] <= tree$value
predictions <- numeric(nrow(x))
predictions[ goes_left] <- dbarts_get_predictions(tree$left,  x[ goes_left, , drop = FALSE])
predictions[!goes_left] <- dbarts_get_predictions(tree$right, x[!goes_left, , drop = FALSE])
predictions
}
# Set this to the variable you want to only require that trees contain. By
# setting it to -1L, we can double check that the method returns the correct
# result by including all trees.
filter_trees_out <- function(trees.flat, x) {
tree_predictions <- by(trees.flat[c("var", "value")], trees.flat$tree,
function(tree.flat, x)
{
# If tree doesn't contain filter variable, return 0.
if (all(tree.flat$var != filter_variable))
return(numeric(nrow(x)))
tree <- dbarts_rebuild_tree(tree.flat)
dbarts_get_predictions(tree, x)
})
tree_predictions <- matrix(unlist(tree_predictions), nrow = nrow(x))
rowSums(tree_predictions)
}
# Uses the flatted trees to get predictions and returns them as a 2-d list,
# n_chains x n_samples.
#' @export
dbarts_marginal_prediction <- function(object, x, filter_variable){
trees <- object$fit$getTrees()
samples_list <- by(trees[c("tree", "var", "value")],
trees[c("chain", "sample")],
function (trees.flat, x) {filter_trees_out(trees.flat, x = x)})
# Convert list
samples <- array(unlist(samples_list),
c(nrow(x), dim(samples_list)[1L], dim(samples_list)[2L]))
# permute to match stored values in bart object
samples <- aperm(samples, c(2L, 3L, 1L))
# undo dbarts' internal scaling
samples <- diff(range(object$y)) * (samples + 0.5) + min(object$y)
# Take the mean of the predicted values over the chains
samples = apply(apply(samples, c(1,3), mean),2 ,mean)
return(samples)
}
f <- function(x) {
10 * sin(pi * x[,1] * x[,2]) + 20 * (x[,3] - 0.5)^2 +
10 * x[,4] + 5 * x[,5]
}
set.seed(99)
sigma <- 1.0
n     <- 100
x  <- matrix(runif(n * 10), n, 10)
Ey <- f(x)
y  <- rnorm(n, Ey, sigma)
set.seed(99)
bartFit <- bart2(x, y, verbose = FALSE, keepTrees = TRUE)
filter_variable <- -1L
filter_variable <- 4
marg_pred = dbarts_marginal_prediction(bartFit, x, filter_variable)
object=bartFit
trees <- object$fit$getTrees()
samples_list <- by(trees[c("tree", "var", "value")],
trees[c("chain", "sample")],
function (trees.flat, x) {filter_trees_out(trees.flat, x = x)})
by(trees[c("tree", "var", "value")],
trees[c("chain", "sample")],
function (trees.flat, x) {filter_trees_out(trees.flat, x = x)})
samples_list <- by(trees[c("tree", "var", "value")],
trees[c("chain", "sample")],
function (trees.flat, x) {filter_trees_out(trees.flat, x)})
trees <- object$fit$getTrees()
samples_list <- by(trees[c("tree", "var", "value")],
trees[c("chain", "sample")],
function (trees.flat, x) {
tree_predictions <- by(trees.flat[c("var", "value")], trees.flat$tree,
function(tree.flat, x)
{
# If tree doesn't contain filter variable, return 0.
if (all(tree.flat$var != filter_variable))
return(numeric(nrow(x)))
tree <- dbarts_rebuild_tree(tree.flat)
dbarts_get_predictions(tree, x)
})
tree_predictions <- matrix(unlist(tree_predictions), nrow = nrow(x))
rowSums(tree_predictions)
})
samples_list <- by(trees[c("tree", "var", "value")],
trees[c("chain", "sample")],
function (trees.flat, x=x) {
tree_predictions <- by(trees.flat[c("var", "value")], trees.flat$tree,
function(tree.flat, x)
{
# If tree doesn't contain filter variable, return 0.
if (all(tree.flat$var != filter_variable))
return(numeric(nrow(x)))
tree <- dbarts_rebuild_tree(tree.flat)
dbarts_get_predictions(tree, x)
})
tree_predictions <- matrix(unlist(tree_predictions), nrow = nrow(x))
rowSums(tree_predictions)
})
#' @export
dbarts_marginal_prediction <- function(object, x, filter_variable){
trees <- object$fit$getTrees()
samples_list <- by(trees[c("tree", "var", "value")],
trees[c("chain", "sample")],
function (trees.flat) {
tree_predictions <- by(trees.flat[c("var", "value")], trees.flat$tree,
function(tree.flat, x)
{
# If tree doesn't contain filter variable, return 0.
if (all(tree.flat$var != filter_variable))
return(numeric(nrow(x)))
tree <- dbarts_rebuild_tree(tree.flat)
dbarts_get_predictions(tree, x)
})
tree_predictions <- matrix(unlist(tree_predictions), nrow = nrow(x))
rowSums(tree_predictions)
})
# Convert list
samples <- array(unlist(samples_list),
c(nrow(x), dim(samples_list)[1L], dim(samples_list)[2L]))
# permute to match stored values in bart object
samples <- aperm(samples, c(2L, 3L, 1L))
# undo dbarts' internal scaling
samples <- diff(range(object$y)) * (samples + 0.5) + min(object$y)
# Take the mean of the predicted values over the chains
samples = apply(apply(samples, c(1,3), mean),2 ,mean)
return(samples)
}
samples_list <- by(trees[c("tree", "var", "value")],
trees[c("chain", "sample")],
function (trees.flat) {
tree_predictions <- by(trees.flat[c("var", "value")], trees.flat$tree,
function(tree.flat, x)
{
# If tree doesn't contain filter variable, return 0.
if (all(tree.flat$var != filter_variable))
return(numeric(nrow(x)))
tree <- dbarts_rebuild_tree(tree.flat)
dbarts_get_predictions(tree, x)
})
tree_predictions <- matrix(unlist(tree_predictions), nrow = nrow(x))
rowSums(tree_predictions)
})
samples_list <- by(trees[c("tree", "var", "value")],
trees[c("chain", "sample")],
function (trees.flat) {
tree_predictions <- by(trees.flat[c("var", "value")], trees.flat$tree,
function(tree.flat)
{
# If tree doesn't contain filter variable, return 0.
if (all(tree.flat$var != filter_variable))
return(numeric(nrow(x)))
tree <- dbarts_rebuild_tree(tree.flat)
dbarts_get_predictions(tree, x)
})
tree_predictions <- matrix(unlist(tree_predictions), nrow = nrow(x))
rowSums(tree_predictions)
})
# Thanks to Dr. Vincent Dorie for kindly helping out with this!
dbarts_rebuild_tree <- function(tree.flat) {
if (tree.flat$var[1L] == -1) return(tree.flat$value[1L])
left <- dbarts_rebuild_tree(tree.flat[-1L,])
if (!is.list(left)) {
n.left <- 1L
} else {
n.left <- left$n
left$n <- NULL
}
right <- dbarts_rebuild_tree(tree.flat[seq.int(2L + n.left, nrow(tree.flat)),])
if (!is.list(right)) {
n.right <- 1L
} else {
n.right <- right$n
right$n <- NULL
}
list(var = tree.flat$var[1L], value = tree.flat$value[1L],
left = left, right = right, n = 1L + n.left + n.right)
}
# Uses a list of lists tree to partition x and returns the
# vector of predictions.
dbarts_get_predictions <- function(tree, x) {
if (!is.list(tree)) return(rep_len(tree, nrow(x)))
goes_left <- x[, tree$var] <= tree$value
predictions <- numeric(nrow(x))
predictions[ goes_left] <- dbarts_get_predictions(tree$left,  x[ goes_left, , drop = FALSE])
predictions[!goes_left] <- dbarts_get_predictions(tree$right, x[!goes_left, , drop = FALSE])
predictions
}
# Set this to the variable you want to only require that trees contain. By
# setting it to -1L, we can double check that the method returns the correct
# result by including all trees.
filter_trees_out <- function(trees.flat, x) {
tree_predictions <- by(trees.flat[c("var", "value")], trees.flat$tree,
function(tree.flat, x)
{
# If tree doesn't contain filter variable, return 0.
if (all(tree.flat$var != filter_variable))
return(numeric(nrow(x)))
tree <- dbarts_rebuild_tree(tree.flat)
dbarts_get_predictions(tree, x)
})
tree_predictions <- matrix(unlist(tree_predictions), nrow = nrow(x))
rowSums(tree_predictions)
}
# Uses the flatted trees to get predictions and returns them as a 2-d list,
# n_chains x n_samples.
#' @export
dbarts_marginal_prediction <- function(object, x, filter_variable){
trees <- object$fit$getTrees()
samples_list <- by(trees[c("tree", "var", "value")],
trees[c("chain", "sample")],
function (trees.flat) {
tree_predictions <- by(trees.flat[c("var", "value")], trees.flat$tree,
function(tree.flat)
{
# If tree doesn't contain filter variable, return 0.
if (all(tree.flat$var != filter_variable))
return(numeric(nrow(x)))
tree <- dbarts_rebuild_tree(tree.flat)
dbarts_get_predictions(tree, x)
})
tree_predictions <- matrix(unlist(tree_predictions), nrow = nrow(x))
rowSums(tree_predictions)
})
# Convert list
samples <- array(unlist(samples_list),
c(nrow(x), dim(samples_list)[1L], dim(samples_list)[2L]))
# permute to match stored values in bart object
samples <- aperm(samples, c(2L, 3L, 1L))
# undo dbarts' internal scaling
samples <- diff(range(object$y)) * (samples + 0.5) + min(object$y)
# Take the mean of the predicted values over the chains
samples = apply(apply(samples, c(1,3), mean),2 ,mean)
return(samples)
}
f <- function(x) {
10 * sin(pi * x[,1] * x[,2]) + 20 * (x[,3] - 0.5)^2 +
10 * x[,4] + 5 * x[,5]
}
set.seed(99)
sigma <- 1.0
n     <- 100
x  <- matrix(runif(n * 10), n, 10)
Ey <- f(x)
y  <- rnorm(n, Ey, sigma)
set.seed(99)
bartFit <- bart2(x, y, verbose = FALSE, keepTrees = TRUE)
filter_variable <- -1L
filter_variable <- 4
marg_pred = dbarts_marginal_prediction(bartFit, x, filter_variable)
marg_pred
library(devtools)
# install()
load_all()
document()
check()
build()
library(devtools)
# install()
load_all()
document()
check()
build()
load("~/Documents/GitHub/AMBARTI/04_simulation/01_simulation_AMMI/results/I10J10sa1sb1sy1L1012r10_data.RData")
data$alpha
load("~/Documents/GitHub/AMBARTI/04_simulation/01_simulation_AMMI/results/I10J10sa1sb1sy1L1012r10_data.RData")
load("~/Documents/GitHub/AMBARTI/04_simulation/01_simulation_AMMI/results/I10J10sa1sb1sy1L1012r10_data.RData")
sum(data$alpha)
load("~/Documents/GitHub/AMBARTI/04_simulation/01_simulation_AMMI/results/I10J10sa1sb1sy1L1012r10_data.RData")
sum(data$alpha)
sum(data$alpha^2)
generate_data_AMMI <- function(I, # Number of genotypes
J, # Number of environments
s_alpha, # standard deviation of alpha
s_beta, # standard deviation of alpha
s_y, # standard deviation of y
lambda # values for lambda (number of Q)
){
# Total number of observations
N = I*J
# Number of components in the bilinear part
Q = length(lambda)
# Generate alpha (genotypes)
alpha = rnorm(I, 0, s_alpha)
# Generate beta (environments)
beta = rnorm(J, 0, s_beta)
# Set the grand mean
mu = 100
# Generate gamma
# gamma <- matrix(NA, nrow = I ,ncol = Q)
# gamma[1,] <- truncnorm::rtruncnorm(Q, a=0)
# gamma[-1,] <- rnorm((I-1)*Q)
gamma = generate_gamma_delta(I, Q)
# Generate delta
# delta <- matrix(rnorm(J*Q), nrow = J ,ncol = Q)
delta = generate_gamma_delta(J, Q)
# Generate the "design matrix"
x = expand.grid(1:I, 1:J)
names(x) <- c('g', 'e') # g = genotype and e = envorinment
x$g = as.factor(x$g)
x$e = as.factor(x$e)
# Generate the interaction/bilinear part
blin = rep(0, I*J)
for (k in 1:length(lambda)) {
blin <- blin + lambda[k]*gamma[x[,'g'],k]*delta[x[,'e'],k]
}
# Now simulate the response
mu_ij = mu + alpha[x[,'g']] + beta[x[,'e']] + blin
# Compute the response for the TRAINING set
y = rnorm(N, mu_ij, s_y)
# Compute the response for the TEST set
y_test = rnorm(N, mu_ij, s_y)
# I1 <- rep(1,I)
# J1 <- rep(1,J)
# This is a matrix representation from Alessandra (it works fine)
# mu_ij <- mu*I1%*%t(J1) + kronecker(alpha,t(J1)) + kronecker(t(beta), (I1)) + gamma%*%diag(lambda)%*%t(delta)
# y <- rnorm(N, c(mu.Y), s_y)
return(list(y       = y,
y_test  = y_test,
x       = x,
I       = I,
J       = J,
Q       = Q,
s_alpha = s_alpha,
s_beta  = s_beta,
s_y     = s_y,
lambda  = lambda,
alpha   = alpha,
beta    = beta,
gamma   = gamma,
delta   = delta,
blinear = blin))
}
square_root_matrix <- function(x){
# When Q = 1, x will be a scalar
if (nrow(x) == 1) {return(sqrt(x))}
# When Q > 1, then x will be a matrix
if (nrow(x) > 1) {
# Jordan normal form
X = eigen(x)
P = X$vectors
A = diag(X$values)
A_sqrt = diag(sqrt(X$values))
P_inv = solve(P)
x_sqrt = P %*% A_sqrt %*%  P_inv
return(x_sqrt)
}
}
generate_gamma_delta <- function(INDEX, Q) {
first_row = TRUE
while(first_row) {
raw_par = matrix(rnorm(INDEX*Q), ncol=Q)
par_mean  = matrix(rep(apply(raw_par,2,mean), each = nrow(raw_par)), ncol=Q)
par_aux  = raw_par - par_mean
# Constraints ----
# apply(par_aux,2,sum)
parTpar = solve(t(par_aux)%*%(par_aux))
A = square_root_matrix(parTpar)
samples = par_aux%*%A
# Force the first to be positive
for (i in 1:nrow(samples)){
row1 = samples[1, ]
if (all(samples[i, ] > 0)) {
aux = samples[i, ]
samples[1,] = aux
samples[i,] = row1
return(samples)
}
}
# t(samples)%*%samples == 0
# apply(samples,2,sum) == diag(Q)
}
}
aa = generate_data_AMMI(10,10,1,1,1,c(8, 12))
aa$alpha
aa = generate_data_AMMI(10,10,1,1,1,c(8, 12))
aa$lambda
aa$gamma
apply(aa$gamma, 2, sum)
t(aa$gamma)%*%aa$gamma
apply(aa$delta, 2, sum)
t(aa$delta)%*%aa$delta
expm::sqrtm
25*20
500/24
6*60
library(devtools)
library(dbarts)
remove.packages('myBART')
load_all()
document()
check()
remove.packages('myBART')
load_all()
document()
check()
load_all()
document()
check()
library(devtools)
library(dbarts)
remove.packages('myBART')
load_all()
document()
check()
build()
library(myBART)
friedman_data = function(n, num_cov, sd_error){
x = matrix(runif(n*num_cov),n,num_cov)
y = 10*sin(pi*x[,1]*x[,2]) + 20*(x[,3]-.5)^2+10*x[,4]+5*x[,5] + rnorm(n, sd=sd_error)
return(list(y = y,
x = as.data.frame(x)))
}
n = 200
ncov = 5
var = 1
data = friedman_data(n, ncov, sqrt(var))
n = 200
ncov = 5
var = 1
data = friedman_data(n, ncov, sqrt(var))
x = data$x
y = data$y
mod = myBART:bart(x, y,
ntrees = 10, nburn = 100, npost = 10,
alpha = 0.99, beta = 0.01)
# Run the semi-parametric BART (WITHOUT intercept)--------------
# set.seed(002)
mod = myBART::bart(x, y,
ntrees = 10, nburn = 100, npost = 10,
alpha = 0.99, beta = 0.01)
